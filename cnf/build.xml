<?xml version="1.0" encoding="UTF-8"?>
<project name="master" default="none">
	
	<import file="build-template.xml"/>
	
	<!--
		Use this file to provide your workspace-specific tasks. Several examples follow.

		Note: make sure that all defined targets depends on the template.init target.
		
		1. To execute tasks before/after compilation:
		
		<target name="compile" depends="template.init">
			<echo message="This task executed before compilation..."/>
			<antcall target="template.compile"/>
			<echo message="This task executed AFTER compilation."/>
		</target>
		
		2. Insert a build target:
		
		<target name="build" dependencies="template.init,template.build, findbugs"/>
		<target name="findbugs">
			...
		</target>
	-->

	<!-- 
	     INIT
	     The target is a dependent of all other targets.
	     It's purpose is to set up the environment only once
	     and avoid it being repeatedly done for each antcall.
	-->
	<target name="init" depends="template.init" unless="maininitialized">
		<condition property="srcTestDirExists">
			<available file="${basedir}/src/test" type="dir"/>
		</condition>

		<taskdef name="bindex" classname="org.osgi.impl.bundle.bindex.ant.BindexTask">
			<classpath>
				<pathelement location="${workspacedir}/cnf/repo/org.osgi.impl.bundle.bindex/org.osgi.impl.bundle.bindex-2.2.0.jar" />
			</classpath>
		</taskdef>

		<path id="repoindex-classpath" location="${workspacedir}/cnf/repo/org.osgi.impl.bundle.repoindex.ant/org.osgi.impl.bundle.repoindex.ant-latest.jar" />
		<taskdef resource="taskdef.properties" classpathref="repoindex-classpath"/>

		<!-- Create a marker property to indicate that initialisation has been completed -->
		<property name="maininitialized" value="set" />
	</target>

	<!-- 
		JARS
		Iterate of the jars to build.
	-->
	<target name="release" depends="template.release">
		<bindex repositoryfile="bundles/repository.xml" root="bundles" quiet="true">
			<fileset dir="bundles" includes="**/*.jar" />
		</bindex>
		<repoindex out="${releaserepo}/index.xml" rooturl="${releaserepo}" name="bnd" pretty="true">
			<fileset dir="bundles" includes="**/*.jar" excludes="**/*-latest.jar"/>
		</repoindex>
	</target>

	<!-- 
		JUNIT
	-->
	<target name="compileTests" depends="template.init,template.build" if="srcTestDirExists">
		<mkdir dir="bin"/>
		<javac fork="yes" executable="${javac}" srcdir="src" destdir="bin" classpath="${project.buildpath}:${project.testpath}" bootclasspath="${project.bootclasspath}" deprecation="true" listfiles="true" target="${javac.target}" source="${javac.source}" debug="${javac.debug}" includeAntRuntime="no" verbose="${verbose}" />
		<!--
		  The eclipse compiler copies resources but the Javac compiler does not
		  If ${src} == ${bin} then this is not necessary, but unfortunately, now
		  it is.
		-->
		<copy todir="bin" verbose="${verbose}" preservelastmodified="true">
			<fileset dir="src">
				<exclude name="**/*.java" />
				<exclude name="**/*.class" />
			</fileset>
		</copy>
	</target>

	<target name="junitSrc" depends="template.init,compileTests" if="srcTestDirExists">
		<junit showoutput="false" printsummary="true" failureproperty='stop' errorproperty='stop' fork="true" dir="${basedir}">
			<assertions>
				<enable />
			</assertions>
			<classpath path="${project.buildpath}"/>
			<formatter type="xml"/>
			<batchtest todir="${target}">
				<fileset dir="${src}">
					<include name="test/**.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="junit" depends="junitSrc,template.junit"/>

	<!-- 
	     INIT for FINDBUGS
	-->
	<target name="fbinit" unless="fbinitialized">
		<path id="antlib-classpath" location="${workspacedir}/cnf/ant-contrib/ant-contrib-1.0b3.jar" />
		<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="antlib-classpath" />

		<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
			<classpath>
				<fileset dir="${workspacedir}/cnf/findbugs/lib">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</taskdef>

		<!-- Create a marker property to indicate that initialisation has been completed -->
		<property name="fbinitialized" value="set" />
	</target>

	<!-- 
	     FINDBUGS
	-->
	<target name="findbugs" depends="template.init,fbinit,template.build">
		<property name="project.bootclasspath.adjusted" value="${project.bootclasspath}" />
		<property name="project.buildpath.adjusted" value="${project.buildpath}" />
		<property name="project.testpath.adjusted" value="${project.testpath}" />

		<!-- filter out some jars and directories -->
		<for
			list="[^:]+/ee\.j2se-[0-9\.]+\.jar#${project.output}#^:+#:+$"
			delimiter="#"
			param="regex">
			<sequential>
				<propertyregex
					property="project.bootclasspath.adjusted"
					input="${project.bootclasspath.adjusted}"
					defaultValue="${project.bootclasspath.adjusted}"
					regexp="@{regex}"
					replace=""
					override="true"
					global="yes" />
				<propertyregex
					property="project.buildpath.adjusted"
					input="${project.buildpath.adjusted}"
					defaultValue="${project.buildpath.adjusted}"
					regexp="@{regex}"
					replace=""
					override="true"
					global="yes" />
				<propertyregex
					property="project.testpath.adjusted"
					input="${project.testpath.adjusted}"
					defaultValue="${project.testpath.adjusted}"
					regexp="@{regex}"
					replace=""
					override="true"
					global="yes" />
			</sequential>
		</for>
		<!-- fixups -->
		<propertyregex
			property="project.bootclasspath.adjusted"
			input="${project.bootclasspath.adjusted}"
			defaultValue="${project.bootclasspath.adjusted}"
			regexp=":+"
			replace=":"
			override="true"
			global="yes" />
		<propertyregex
			property="project.buildpath.adjusted"
			input="${project.buildpath.adjusted}"
			defaultValue="${project.buildpath.adjusted}"
			regexp=":+"
			replace=":"
			override="true"
			global="yes" />
		<propertyregex
			property="project.testpath.adjusted"
			input="${project.testpath.adjusted}"
			defaultValue="${project.testpath.adjusted}"
			regexp=":+"
			replace=":"
			override="true"
			global="yes" />

		<findbugs
			home="${workspacedir}/cnf/findbugs"
			includeFilter="${workspacedir}/cnf/findbugs.include.xml"
			excludeFilter="${workspacedir}/cnf/findbugs.exclude.xml"
			output="xml:withMessages"
			outputFile="${target}/${project.name}.findbugs.xml">
			<sourcePath path="${project.sourcepath}" />
			<auxClasspath path="${project.bootclasspath.adjusted}:${project.buildpath.adjusted}:${project.testpath.adjusted}" />
			<class location="${target}" />
		</findbugs>
		<xslt
			in="${target}/${project.name}.findbugs.xml"
			out="${target}/${project.name}.findbugs.html"
			style="${workspacedir}/cnf/findbugs/src/xsl/default.xsl"
			failOnError="false"
		/>
	</target>

	<!--
	     CLEAN
	-->
	<target name="deepclean" depends="template.init,template.clean" if="project.dependson">
		<subant target="template.clean" inheritAll="false" buildpath="${project.dependson}" />
	</target>

	<target name="clean" depends="template.init,template.clean">
		<delete dir="${workspacedir}/cnf/tmp" />
		<delete dir="${workspacedir}/cnf/p2target" />
	</target>
</project>
